(()=>{"use strict";const t={CircleDiameter:5,InitialClusterType:"Wall",WalkerSource:"Random",MaxWalkers:2e4,EdgeMargin:0,PruneOldWalkers:!1,MaxAge:30,ReplenishWalkers:!1,PruneDistantWalkers:!1,MaxWanderDistance:20,VaryDiameterByDistance:!1,VaryDiameterRandomly:!1,ShowClusters:!0,ShowWalkers:!0,ShowShapes:!0,BiasTowards:"",BiasForce:1,UsePerWalkerBias:!0,UseFrame:!1,FrameSize:900,CaptureLines:!0,RenderMode:"Shapes",UseStroke:!1,UseColors:!1,BackgroundColor:{h:230,s:20,b:40},WalkerColor:{h:200,s:30,b:44},ClusterColor:{h:30,s:70,b:80},ShapeColor:{h:100,s:50,b:80},LineColor:{h:10,s:70,b:100},FrameColor:{h:0,s:100,b:100}},s=[];class e{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return s.length?s.pop():new e}static releaseBranch(t){s.push(t)}static sortBranches(t,s){return t.sort>s.sort?-1:1}}class i{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,s=!1){if(!s){const s=t._bvh;if(s&&s!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const i=t._polygon,r=t.x,n=t.y;i&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,h=i?0:t.radius*t.scale,_=(i?t._min_x:r-h)-o,l=(i?t._min_y:n-h)-o,a=(i?t._max_x:r+h)+o,c=(i?t._max_y:n+h)+o;t._bvh_min_x=_,t._bvh_min_y=l,t._bvh_max_x=a,t._bvh_max_y=c;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const s=u._bvh_parent,i=u._bvh_min_x,r=u._bvh_min_y,n=u._bvh_max_x,o=u._bvh_max_y,h=u._bvh_parent=t._bvh_parent=e.getBranch();h._bvh_parent=s,h._bvh_left=u,h._bvh_right=t,h._bvh_sort=d++,h._bvh_min_x=_<i?_:i,h._bvh_min_y=l<r?l:r,h._bvh_max_x=a>n?a:n,h._bvh_max_y=c>o?c:o,s?s._bvh_left===u?s._bvh_left=h:s._bvh_right=h:this._hierarchy=h;break}{const t=u._bvh_left,s=t._bvh_min_y,e=t._bvh_max_x,i=t._bvh_max_y,r=_<t._bvh_min_x?_:t._bvh_min_x,n=l<s?l:s,o=a>e?a:e,h=c>i?c:i,b=(o-r)*(h-n)-(e-t._bvh_min_x)*(i-s),g=u._bvh_right,m=g._bvh_min_x,y=g._bvh_min_y,v=g._bvh_max_x,p=g._bvh_max_y,x=_<m?_:m,f=l<y?l:y,k=a>v?a:v,w=c>p?c:p,C=(k-x)*(w-f)-(v-m)*(p-y);u._bvh_sort=d++,u._bvh_min_x=r<x?r:x,u._bvh_min_y=n<f?n:f,u._bvh_max_x=o>k?o:k,u._bvh_max_y=h>w?h:w,u=b<=C?t:g}}else this._hierarchy=t}remove(t,s=!1){if(!s){const s=t._bvh;if(s&&s!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const i=t._bvh_parent,r=i._bvh_parent,n=i._bvh_left,o=n===t?i._bvh_right:n;if(o._bvh_parent=r,o._bvh_branch&&(o._bvh_sort=i._bvh_sort),r){r._bvh_left===i?r._bvh_left=o:r._bvh_right=o;let t=r;for(;t;){const s=t._bvh_left,e=s._bvh_min_x,i=s._bvh_min_y,r=s._bvh_max_x,n=s._bvh_max_y,o=t._bvh_right,h=o._bvh_min_x,_=o._bvh_min_y,l=o._bvh_max_x,a=o._bvh_max_y;t._bvh_min_x=e<h?e:h,t._bvh_min_y=i<_?i:_,t._bvh_max_x=r>l?r:l,t._bvh_max_y=n>a?n:a,t=t._bvh_parent}}else this._hierarchy=o;e.releaseBranch(i)}update(){const t=this._bodies,s=t.length;for(let e=0;e<s;++e){const s=t[e];let i=!1;if(i||s.padding===s._bvh_padding||(s._bvh_padding=s.padding,i=!0),!i){const t=s._polygon;t&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords();const e=s.x,r=s.y,n=t?0:s.radius*s.scale,o=t?s._min_x:e-n,h=t?s._min_y:r-n,_=t?s._max_x:e+n,l=t?s._max_y:r+n;i=o<s._bvh_min_x||h<s._bvh_min_y||_>s._bvh_max_x||l>s._bvh_max_y}i&&(this.remove(s,!0),this.insert(s,!0))}}potentials(t){const s=[],e=t._bvh_min_x,i=t._bvh_min_y,r=t._bvh_max_x,n=t._bvh_max_y;let o=this._hierarchy,h=!0;if(!o||!o._bvh_branch)return s;for(;o;){if(h){h=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=e&&t._bvh_max_y>=i&&t._bvh_min_x<=r&&t._bvh_min_y<=n;)o=t,t=o._bvh_branch?o._bvh_left:null}const _=o._bvh_branch,l=_?o._bvh_right:null;if(l&&l._bvh_max_x>e&&l._bvh_max_y>i&&l._bvh_min_x<r&&l._bvh_min_y<n)o=l,h=!0;else{_||o===t||s.push(o);let e=o._bvh_parent;if(!e)break;for(;e&&e._bvh_right===o;)o=e,e=o._bvh_parent;o=e}}return s}draw(t){const s=this._bodies,e=s.length;for(let i=0;i<e;++i)s[i].draw(t)}drawBVH(t){let s=this._hierarchy,e=!0;for(;s;){if(e){e=!1;let t=s._bvh_branch?s._bvh_left:null;for(;t;)s=t,t=s._bvh_branch?s._bvh_left:null}const i=s._bvh_branch,r=s._bvh_min_x,n=s._bvh_min_y,o=s._bvh_max_x,h=s._bvh_max_y,_=i?s._bvh_right:null;if(t.moveTo(r,n),t.lineTo(o,n),t.lineTo(o,h),t.lineTo(r,h),t.lineTo(r,n),_)s=_,e=!0;else{let t=s._bvh_parent;if(!t)break;for(;t&&t._bvh_right===s;)s=t,t=s._bvh_parent;s=t}}}}class r{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function n(t,s,e=null,i=!0){const r=t._polygon,n=s._polygon;let _=!1;return e&&(e.a=t,e.b=s,e.a_in_b=!0,e.b_in_a=!0,e.overlap=null,e.overlap_x=0,e.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),n&&(s._dirty_coords||s.x!==s._x||s.y!==s._y||s.angle!==s._angle||s.scale_x!==s._scale_x||s.scale_y!==s._scale_y)&&s._calculateCoords(),i&&!function(t,s){const e=t._polygon,i=e?0:t.x,r=e?0:t.y,n=e?0:t.radius*t.scale,o=e?t._min_x:i-n,h=e?t._min_y:r-n,_=e?t._max_x:i+n,l=e?t._max_y:r+n,a=s._polygon,c=a?0:s.x,u=a?0:s.y,d=a?0:s.radius*s.scale,b=a?s._min_x:c-d,g=a?s._min_y:u-d,m=a?s._max_x:c+d,y=a?s._max_y:u+d;return o<m&&h<y&&_>b&&l>g}(t,s)||(r&&t._dirty_normals&&t._calculateNormals(),n&&s._dirty_normals&&s._calculateNormals(),_=r&&n?function(t,s,e=null){const i=t._coords.length,r=s._coords.length;if(2===i&&2===r){const i=t._coords,r=s._coords;return e&&(e.overlap=0),i[0]===r[0]&&i[1]===r[1]}const n=t._coords,o=s._coords,_=t._normals,l=s._normals;if(i>2)for(let t=0,s=1;t<i;t+=2,s+=2)if(h(n,o,_[t],_[s],e))return!1;if(r>2)for(let t=0,s=1;t<r;t+=2,s+=2)if(h(n,o,l[t],l[s],e))return!1;return!0}(t,s,e):r?o(t,s,e,!1):n?o(s,t,e,!0):function(t,s,e=null){const i=t.radius*t.scale,r=s.radius*s.scale,n=s.x-t.x,o=s.y-t.y,h=i+r,_=n*n+o*o;if(_>h*h)return!1;if(e){const t=Math.sqrt(_);e.a_in_b=i<=r&&t<=r-i,e.b_in_a=r<=i&&t<=i-r,e.overlap=h-t,e.overlap_x=n/t,e.overlap_y=o/t}return!0}(t,s,e)),e&&(e.collision=_),_}function o(t,s,e=null,i=!1){const r=t._coords,n=t._edges,o=t._normals,h=s.x,_=s.y,l=s.radius*s.scale,a=2*l,c=l*l,u=r.length;let d=!0,b=!0,g=null,m=0,y=0;if(2===u){const t=h-r[0],s=_-r[1],i=t*t+s*s;if(i>c)return!1;if(e){const e=Math.sqrt(i);g=l-e,m=t/e,y=s/e,b=!1}}else for(let t=0,s=1;t<u;t+=2,s+=2){const i=h-r[t],v=_-r[s],p=n[t],x=n[s],f=i*p+v*x,k=f<0?-1:f>p*p+x*x?1:0;let w=!1,C=0,W=0,M=0;if(e&&d&&i*i+v*v>c&&(d=!1),k){const s=-1===k,o=s?0===t?u-2:t-2:t===u-2?0:t+2,a=o+1,d=h-r[o],g=_-r[a],m=n[o],y=n[a],p=d*m+g*y;if((p<0?-1:p>m*m+y*y?1:0)==-k){const t=s?i:d,r=s?v:g,n=t*t+r*r;if(n>c)return!1;if(e){const s=Math.sqrt(n);w=!0,C=l-s,W=t/s,M=r/s,b=!1}}}else{const r=o[t],n=o[s],h=i*r+v*n,_=h<0?-h:h;if(h>0&&_>l)return!1;e&&(w=!0,C=l-h,W=r,M=n,(b&&h>=0||C<a)&&(b=!1))}w&&(null===g||g>C)&&(g=C,m=W,y=M)}return e&&(e.a_in_b=i?b:d,e.b_in_a=i?d:b,e.overlap=g,e.overlap_x=i?-m:m,e.overlap_y=i?-y:y),!0}function h(t,s,e,i,r=null){const n=t.length,o=s.length;if(!n||!o)return!0;let h=null,_=null,l=null,a=null;for(let s=0,r=1;s<n;s+=2,r+=2){const n=t[s]*e+t[r]*i;(null===h||h>n)&&(h=n),(null===_||_<n)&&(_=n)}for(let t=0,r=1;t<o;t+=2,r+=2){const n=s[t]*e+s[r]*i;(null===l||l>n)&&(l=n),(null===a||a<n)&&(a=n)}if(h>a||_<l)return!0;if(r){let t=0;if(h<l)if(r.a_in_b=!1,_<a)t=_-l,r.b_in_a=!1;else{const s=_-l,e=a-h;t=s<e?s:-e}else if(r.b_in_a=!1,_>a)t=h-a,r.a_in_b=!1;else{const s=_-l,e=a-h;t=s<e?s:-e}const s=r.overlap,n=t<0?-t:t;if(null===s||s>n){const s=t<0?-1:1;r.overlap=n,r.overlap_x=e*s,r.overlap_y=i*s}}return!1}class _{constructor(t=0,s=0,e=0){this.x=t,this.y=s,this.padding=e,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=e,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,s=null,e=!0){return n(this,t,s,e)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new r}static createResult(){return new r}}class l extends _{constructor(t=0,s=0,e=0,i=1,r=0){super(t,s,r),this.radius=e,this.scale=i}draw(t){const s=this.x,e=this.y,i=this.radius*this.scale;t.moveTo(s+i,e),t.arc(s,e,i,0,2*Math.PI)}}class a extends _{constructor(t=0,s=0,e=[],i=0,r=1,n=1,o=0){super(t,s,o),this.angle=i,this.scale_x=r,this.scale_y=n,this._polygon=!0,this._x=t,this._y=s,this._angle=i,this._scale_x=r,this._scale_y=n,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,a.prototype.setPoints.call(this,e)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const s=this._coords;if(2===s.length)t.moveTo(s[0],s[1]),t.arc(s[0],s[1],1,0,2*Math.PI);else{t.moveTo(s[0],s[1]);for(let e=2;e<s.length;e+=2)t.lineTo(s[e],s[e+1]);s.length>4&&t.lineTo(s[0],s[1])}}setPoints(t){const s=t.length;this._points=new Float64Array(2*s),this._coords=new Float64Array(2*s),this._edges=new Float64Array(2*s),this._normals=new Float64Array(2*s);const e=this._points;for(let i=0,r=0,n=1;i<s;++i,r+=2,n+=2){const s=t[i];e[r]=s[0],e[n]=s[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,s=this.y,e=this.angle,i=this.scale_x,r=this.scale_y,n=this._points,o=this._coords,h=n.length;let _,l,a,c;for(let u=0,d=1;u<h;u+=2,d+=2){let h=n[u]*i,b=n[d]*r;if(e){const t=Math.cos(e),s=Math.sin(e),i=h;h=i*t-b*s,b=i*s+b*t}h+=t,b+=s,o[u]=h,o[d]=b,0===u?(_=l=h,a=c=b):(h<_?_=h:h>l&&(l=h),b<a?a=b:b>c&&(c=b))}this._x=t,this._y=s,this._angle=e,this._scale_x=i,this._scale_y=r,this._min_x=_,this._min_y=a,this._max_x=l,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,s=this._edges,e=this._normals,i=t.length;for(let r=0,n=1;r<i;r+=2,n+=2){const o=r+2<i?r+2:0,h=t[o]-t[r],_=t[o+1]-t[n],l=h||_?Math.sqrt(h*h+_*_):0;s[r]=h,s[n]=_,e[r]=l?_/l:0,e[n]=l?-h/l:0}this._dirty_normals=!1}}class c extends a{constructor(t=0,s=0,e=0){super(t,s,[[0,0]],0,1,1,e),this._point=!0}}c.prototype.setPoints=void 0;class u{constructor(){this._bvh=new i}createCircle(t=0,s=0,e=0,i=1,r=0){const n=new l(t,s,e,i,r);return this._bvh.insert(n),n}createPolygon(t=0,s=0,e=[[0,0]],i=0,r=1,n=1,o=0){const h=new a(t,s,e,i,r,n,o);return this._bvh.insert(h),h}createPoint(t=0,s=0,e=0){const i=new c(t,s,e);return this._bvh.insert(i),i}createResult(){return new r}static createResult(){return new r}insert(...t){for(const s of t)this._bvh.insert(s,!1);return this}remove(...t){for(const s of t)this._bvh.remove(s,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,s,e=null,i=!0){return n(t,s,e,i)}}class d{constructor(s,e){this.p5=s,this.settings={...t,...e},this.renderMode=this.settings.RenderMode,this.numWalkers=0,this.customMovementFunction=void 0,this.edgeMargin=this.settings.EdgeMargin,this.edges={},this.resetEdges(),this.maxDistance=this.p5.dist(this.edges.left,this.edges.top,window.innerWidth/2,window.innerHeight/2),this.system=new u,this.bodies=[],this.shapes=[],this.lines=[]}iterate(){this.settings.ReplenishWalkers&&this.numWalkers<this.settings.MaxWalkers&&this.createDefaultWalkers(this.settings.MaxWalkers-this.numWalkers,this.settings.ReplenishmentSource),this.moveWalkers(),this.system.update(),this.handleCollisions(),this.pruneWalkers()}draw(){this.settings.UseColors?this.p5.background(d.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.background(255);for(const t of this.shapes){this.p5.noFill(),this.p5.stroke(100),this.p5.beginShape();for(let s=0;s<t._coords.length;s+=2)this.p5.vertex(t._coords[s],t._coords[s+1]);this.p5.endShape()}if("Lines"===this.renderMode){if(this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.LineColor)):this.p5.stroke(75),this.lines.length>0)for(let t of this.lines)this.p5.line(t.p1.x,t.p1.y,t.p2.x,t.p2.y)}else for(let t of this.bodies)if(t._point)this.p5.noFill(),t.stuck?(this.p5.noStroke(),this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(200),this.p5.ellipse(t.x,t.y,5)):t.stuck?this.p5.noStroke():this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.stroke(0),this.p5.point(t.x,t.y);else if(t._circle)this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):t.stuck?this.p5.noFill():this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230),this.p5.ellipse(t.x,t.y,2*t.radius);else if(t._polygon){this.settings.UseStroke?this.settings.UseColors?this.p5.stroke(this.getColorStringFromObject(this.settings.BackgroundColor)):this.p5.stroke(255):this.p5.noStroke(),t.stuck?this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.ClusterColor)):this.p5.fill(120):t.stuck?this.p5.noFill():this.settings.UseColors?this.p5.fill(this.getColorStringFromObject(this.settings.WalkerColor)):this.p5.fill(230),this.p5.beginShape();for(let s=0;s<t._coords.length-1;s+=2)this.p5.vertex(t._coords[s],t._coords[s+1]);this.p5.endShape()}}resetEdges(){this.edges.left=0,this.edges.right=window.innerWidth,this.edges.top=0,this.edges.bottom=window.innerHeight}moveWalkers(){if(this.bodies.length>0)for(let t of this.bodies)if(!t.stuck){let s,e=this.p5.random(-1,1),i=this.p5.random(-1,1);if(this.settings.UsePerWalkerBias&&t.hasOwnProperty("BiasTowards"))s=this.getDeltasTowards(t.x,t.y,t.BiasTowards.x,t.BiasTowards.y),e+=s.x,i+=s.y;else switch(this.settings.BiasTowards){case"Equator":t.y<window.innerHeight/2?i+=this.settings.BiasForce:i-=this.settings.BiasForce;break;case"Meridian":t.x<window.innerWidth/2?e+=this.settings.BiasForce:e-=this.settings.BiasForce}if(this.customMovementFunction&&this.customMovementFunction instanceof Function){let s=this.customMovementFunction(t);e+=s.dx,i+=s.dy}t._point&&(e=Math.round(e),i=Math.round(i)),t.x+=e,t.y+=i,t.age++}}getDeltasTowards(t,s,e,i){let r=Math.atan2(i-s,e-t);return{x:Math.cos(r)*this.settings.BiasForce,y:Math.sin(r)*this.settings.BiasForce}}handleCollisions(){for(let t of this.shapes){const s=t.potentials();for(let e of s)t.collides(e)&&(e.stuck=!0,this.numWalkers--)}for(const t of this.bodies){if(t.stuck)continue;const s=t.potentials();for(const e of s)t._point?e.stuck&&(t.stuck=!0,this.numWalkers--):e.stuck&&t.collides(e)&&(t.stuck=!0,this.numWalkers--,this.settings.CaptureLines&&this.lines.push({p1:{x:t.x,y:t.y},p2:{x:e.x,y:e.y}}))}}pruneWalkers(){if(this.settings.PruneOldWalkers||this.settings.PruneDistantWalkers)for(let[t,s]of this.bodies.entries())!s.stuck&&(this.settings.PruneOldWalkers&&s.age>this.settings.MaxAge||this.settings.PruneDistantWalkers&&this.p5.dist(s.x,s.y,s.originalX,s.originalY)>this.settings.MaxWanderDistance)&&(s.remove(),this.bodies.splice(t,1),this.numWalkers--)}createParticle(t){if(!t||"object"!=typeof t)return;let s;if(t.hasOwnProperty("type"))switch(t.type){case"Point":s=this.system.createPoint(Math.round(t.x),Math.round(t.y)),s._point=!0;break;case"Circle":default:s=this.system.createCircle(t.x,t.y,t.diameter/2),s._circle=!0;break;case"Polygon":s=this.system.createPolygon(t.x,t.y,t.polygon,t.hasOwnProperty("rotation")?this.p5.radians(t.rotation):0),s._polygon=!0}else{const e=t.hasOwnProperty("diameter")?t.diameter:this.settings.CircleDiameter;s=this.system.createCircle(t.x,t.y,e/2),s._circle=!0}s.stuck=!!t.hasOwnProperty("stuck")&&t.stuck,s.age=0,t.hasOwnProperty("BiasTowards")&&(s.BiasTowards=t.BiasTowards),s.originalX=s.x,s.originalY=s.y,this.bodies.push(s)}createWalker(t){this.createParticle(t),this.numWalkers++}createDefaultWalkers(t=this.settings.MaxWalkers,s=this.settings.WalkerSource){for(let s=0;s<t;s++){let t={};t.x=this.p5.random(this.edges.left,this.edges.right),t.y=this.p5.random(this.edges.top,this.edges.bottom),this.createWalker(t)}}createDefaultClusters(t=this.settings.InitialClusterType){this.createClusterFromParams("Equator"===this.settings.BiasTowards?[this.createHorizontalClusterWall(window.innerHeight/2)]:"Meridian"===this.settings.BiasTowards?[this.createVerticalClusterWall(window.innerWidth/2)]:[])}createHorizontalClusterWall(t){let s=[],e=window.innerWidth;for(let i=0;i<=e/this.settings.CircleDiameter;i++)s.push({x:this.edges.left+i*this.settings.CircleDiameter,y:t,diameter:this.settings.CircleDiameter});return s}createVerticalClusterWall(t){let s=[],e=window.innerHeight;for(let i=0;i<=e/this.settings.CircleDiameter;i++)s.push({x:t,y:this.edges.top+i*this.settings.CircleDiameter,diameter:this.settings.CircleDiameter});return s}createClusterFromParams(t){if(t.length>0)for(let s of t)s.stuck=!0,this.createParticle(s)}removeAll(){for(let t of this.bodies)this.system.remove(t);for(let t of this.shapes)this.system.remove(t);this.bodies=[],this.shapes=[],this.lines=[],this.numWalkers=0}static getColorStringFromObject(t){return"hsla("+t.h+", "+t.s+"%, "+t.b+"%, "+d.getOpacity(t)+")"}static getOpacity(t){return"a"in t?t.a:"1.0"}}new p5((function(t){const s=new d(t);function e(){s.removeAll(),s.createDefaultWalkers(),s.createDefaultClusters()}t.setup=function(){t.createCanvas(window.innerWidth,window.innerHeight),t.colorMode(t.HSB,255),t.ellipseMode(t.CENTER),s.settings.BiasTowards="Meridian",e()},t.draw=function(){s.iterate(),s.draw()},t.keyReleased=function(){"r"===t.key?e():"e"===t.key&&s.export()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,